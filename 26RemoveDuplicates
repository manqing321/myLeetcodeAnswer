ok
Here is my answer and it's useless due to the " heap-buffer-overflow"
I also couldn't deal with the question

here is the C code:
`
int removeDuplicates(int* nums, int numsSize) {
    int result=1;
    for(int i=numsSize-1;i>0;i--)
    {
        if(nums[i]==nums[i-1])
        {
          nums[i]=nums[numsSize-1];  
        }
        else
        {
            result++;
        }
    }
    for(int i=0;i<numsSize-1;i++)
    {
        for(int j=i;j<numsSize-1;j++)
        {
            if(nums[j]>nums[j+1])
            {
                int temp=nums[j];
                nums[j]=nums[j+1];
                nums[j+1]=temp;
            }
        }
    }
    return result;
}
`

2019/4/17
maybe it's beacause i have used too much memory to do that.
Here is today's answer(it's right this time):
`
int removeDuplicates(int* nums, int numsSize) {
    if(nums==NULL || numsSize==0)
	return 0;
	
	int k=0;
	int t=1;
	//不一样的数k就加一位
	//t是循环下标
	for(; t<numsSize; t++)
	{
		//printf("nums[%d]=%d nums[%d]=%d\n",t,nums[t],k,nums[k]);
		if(nums[t]!=nums[k])
		{
			k++;
			nums[k]=nums[t];
		}
	}
	//printf("%d\n",k);
	return k+1;
}
`
